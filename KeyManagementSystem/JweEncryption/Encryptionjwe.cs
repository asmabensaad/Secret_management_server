using System.Security.Claims;
using System.Security.Cryptography;
using Microsoft.IdentityModel.JsonWebTokens;
using Microsoft.IdentityModel.Tokens;
using Newtonsoft.Json;

namespace JweEncryption;

public class Encryptionjwe
{
 /*   static void Main ( string [] args )
    {
        var tokenHandler = new JsonWebTokenHandler ();
        var now = DateTime.Now ;
        var key = AutoGeneratedHmac ( 64 );
        var jwt = new SecurityTokenDescriptor
        {
            Issuer = "www.mysite.com ",
            Audience = "your-spa" ,
            IssuedAt = now ,
            NotBefore = now ,
            Expires = now.AddHours ( 1 ),
            Subject = new ClaimsIdentity ( new List < Claim >
            {
                new Claim ( JwtRegisteredClaimNames.Email , "monemail@gmail.com", ClaimValueTypes.Email ),
                new Claim ( JwtRegisteredClaimNames.GivenName , "asma" ),
                new Claim ( JwtRegisteredClaimNames.Sub , Guid.NewGuid().ToString())
            }),
            SigningCredentials = new SigningCredentials ( key , SecurityAlgorithms.HmacSha256 )
        };
        Console.WriteLine (  $"{ tokenHandler.CreateToken ( jwt )} { Environment.NewLine } ");
        var jws = tokenHandler.CreateToken ( jwt );
// Store HMAC as Filesystem, recover and test if itâ€™s valid
        var jwk = JsonWebKeyConverter.ConvertFromSymmetricSecurityKey ( key );
        jwk.KeyId = Guid.NewGuid().ToString ();
        File.WriteAllText ( "current.key" , JsonConvert.SerializeObject ( jwk ));
// Now recover and verify if still valid
        var storedJwk = JsonConvert.DeserializeObject < JsonWebKey > ( File.ReadAllText ( "current.key" ));
        var validationResult = tokenHandler.ValidateToken( jws , new TokenValidationParameters
        {
            ValidIssuer = "www.mysite.com " ,
            ValidAudience = " your-spa " ,
            IssuerSigningKey = storedJwk
        });
        Console.WriteLine ( validationResult.IsValid );
    }
    private static SymmetricSecurityKey AutoGeneratedHmac ( int bytes )
    {
        return new SymmetricSecurityKey ( GenerateHmacKey ( bytes ));
    }
    private static RandomNumberGenerator Rng = RandomNumberGenerator.Create ();
    private static byte [] GenerateHmacKey ( int bytes )
    {
        byte [] data = new byte [ bytes ];
        Rng . GetBytes ( data );
        return data ;
    }*/
}